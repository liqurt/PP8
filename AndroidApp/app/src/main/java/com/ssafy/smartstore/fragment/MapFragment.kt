package com.ssafy.smartstore.fragmentimport android.Manifestimport android.content.Contextimport android.content.Intentimport android.content.pm.PackageManagerimport android.location.Geocoderimport android.location.Locationimport android.location.LocationManagerimport android.net.Uriimport android.os.Bundleimport android.os.Looperimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport android.widget.Buttonimport android.widget.Toastimport androidx.activity.result.ActivityResultLauncherimport androidx.activity.result.contract.ActivityResultContractsimport androidx.core.app.ActivityCompatimport androidx.core.content.ContextCompatimport com.google.android.gms.location.*//import com.google.android.gms.maps.Rimport com.google.android.gms.maps.model.*import com.ssafy.smartstore.activity.MainActivityimport java.io.IOExceptionimport java.util.*import android.app.AlertDialogimport android.content.Context.LOCATION_SERVICEimport android.location.Addressimport androidx.fragment.app.Fragmentimport com.google.android.gms.location.*import com.google.android.gms.maps.*import com.google.android.gms.maps.model.LatLngimport com.google.android.gms.maps.model.Markerimport com.google.android.gms.maps.model.MarkerOptionsimport com.ssafy.smartstore.Rimport java.util.*// Order 탭 - 지도 화면class MapFragment : Fragment(), OnMapReadyCallback {    private val TAG = "MapFragment_ssafy"    private val UPDATE_INTERVAL = 1000    private val FASTEST_UPDATE_INTERVAL = 500    private lateinit var mainActivity: MainActivity    private var mMap : GoogleMap? = null    private var currentMarker: Marker? = null    private var mFusedLocationClient: FusedLocationProviderClient? = null    private lateinit var locationRequest: LocationRequest    private var mCurrentLocation: Location? = null    private lateinit var currentPosition: LatLng    private var firstRendering: Boolean = true    private lateinit var mapView: MapView    private val requiredMapPermission = arrayOf(        Manifest.permission.ACCESS_FINE_LOCATION    )    private val requestActivity: ActivityResultLauncher<Intent> = registerForActivityResult(        ActivityResultContracts.StartActivityForResult()    ) {        if (checkLocationServicesStatus()) {            startLocationUpdates()        }    }    private val mapPermissionResult = registerForActivityResult(        ActivityResultContracts.RequestPermission()    ) { result ->        if (!result) {            Toast.makeText(requireContext(), "위치 권한이 필요합니다.", Toast.LENGTH_SHORT).show()        } else {            Toast.makeText(requireContext(), "권한 확인!", Toast.LENGTH_SHORT).show()        }    }    override fun onAttach(context: Context) {        super.onAttach(context)        mainActivity = context as MainActivity    }    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        mainActivity.hideBottomNav(true)        mFusedLocationClient = LocationServices.getFusedLocationProviderClient(requireContext())        locationRequest = LocationRequest.create().apply {            priority = LocationRequest.PRIORITY_HIGH_ACCURACY            interval = UPDATE_INTERVAL.toLong()            smallestDisplacement = 10.0f            fastestInterval = FASTEST_UPDATE_INTERVAL.toLong()        }    }    override fun onCreateView(        inflater: LayoutInflater,        container: ViewGroup?,        savedInstanceState: Bundle?    ): View? {        val view = inflater.inflate(R.layout.fragment_map,null)        mapView = view.findViewById(R.id.map)        mapView.onCreate(savedInstanceState)        mapView.getMapAsync(this)        return view    }    override fun onMapReady(p0: GoogleMap) {        mMap = p0        setDefaultStoreLocation()        val hasFineLocationPermission = ContextCompat.checkSelfPermission(            requireContext(),            requiredMapPermission[0]        )        if (hasFineLocationPermission == PackageManager.PERMISSION_GRANTED) {            startLocationUpdates()        } else {            if (ActivityCompat.shouldShowRequestPermissionRationale(                    requireActivity(),                    requiredMapPermission[0]                )) {                val builder = AlertDialog.Builder(requireContext())                builder.setTitle("위치 권한 허용")                    .setMessage("위치 권한 허용이 필요합니다.")                    .setPositiveButton("확인") {_, _ ->                        mapPermissionResult.launch(requiredMapPermission[0])                    }                val alertDialog = builder.create()                alertDialog.show()            } else {                mapPermissionResult.launch(requiredMapPermission[0])            }        }        mMap!!.uiSettings.isMyLocationButtonEnabled = true    }    private var locationCallback: LocationCallback = object : LocationCallback() {        override fun onLocationResult(locationResult: LocationResult) {            super.onLocationResult(locationResult)            val locationList = locationResult.locations            if (locationList.size > 0) {                val location = locationList[locationList.size - 1]                currentPosition = LatLng(location.latitude, location.longitude)                val markerTitle: String = getCurrentAddress(currentPosition)                val markerSnippets = "위도: ${location.latitude}, 경도: ${location.longitude}"                setCurrentLocation(markerTitle, markerSnippets)                mCurrentLocation = location            }        }    }    private fun startLocationUpdates() {        if (!checkLocationServicesStatus()) {            showDialogStore()        } else {            if (checkMapPermission()) {                mFusedLocationClient?.requestLocationUpdates(                    locationRequest,                    locationCallback,                    Looper.myLooper()!!                )                if (mMap != null) mMap!!.isMyLocationEnabled = true            }        }    }    override fun onStart() {        super.onStart()        if (checkMapPermission()) {            mFusedLocationClient?.requestLocationUpdates(locationRequest, locationCallback, null)            if (mMap != null && checkLocationServicesStatus()) mMap!!.isMyLocationEnabled = true        }        mapView.onStart()    }    override fun onStop() {        super.onStop()        mapView.onStop()        mFusedLocationClient?.removeLocationUpdates(locationCallback)    }    override fun onResume() {        super.onResume()        mapView.onResume()    }    override fun onPause() {        super.onPause()        mapView.onPause()    }    override fun onLowMemory() {        super.onLowMemory()        mapView.onLowMemory()    }    fun getCurrentAddress(latLng: LatLng): String {        val geocoder = Geocoder(requireContext(), Locale.getDefault())        val addresses: List<Address>?        try {            addresses = geocoder.getFromLocation(                latLng.latitude,                latLng.longitude,                1            )        } catch(ioException: IOException) {            Toast.makeText(requireContext(), "지오코더 서비스 사용 불가", Toast.LENGTH_SHORT).show()            return "지오코더 사용 불가"        } catch (illegalArgumentException: IllegalArgumentException) {            Toast.makeText(requireContext(), "잘못된 GPS 좌표", Toast.LENGTH_LONG).show()            return "잘못된 GPS 좌표"        }        return if (addresses == null || addresses.isEmpty()) {            Toast.makeText(requireContext(), "주소 발견 불가", Toast.LENGTH_SHORT).show()            "주소 발견 불가"        } else {            val address = addresses[0]            address.getAddressLine(0).toString()        }    }    private fun checkLocationServicesStatus() : Boolean {        val locationManager = activity?.getSystemService(LOCATION_SERVICE) as LocationManager        return (locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER)                || locationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER))    }    fun setCurrentLocation(markerTitle: String?, markerSnippets: String) {        currentMarker?.remove()        val currentLatLng = LatLng(36.108536, 128.413352) // 삼성전자 구미사업장        val markerOptions = MarkerOptions()        markerOptions.position(currentLatLng)        markerOptions.title(markerTitle)        markerOptions.snippet(markerSnippets)        markerOptions.draggable(true)        currentMarker = mMap!!.addMarker(markerOptions)        val cameraUpdate = CameraUpdateFactory.newLatLng(currentLatLng)        mMap!!.moveCamera(cameraUpdate)    }    private fun setDefaultStoreLocation() {        val DEFAULT_LOCATION = LatLng(36.108536, 128.413352)        val markerTitle = "위치 정보 가져올 수 없음."        val markerSnippets = "위치 권한과 GPS 활성 여부 확인 필요"        currentMarker?.remove()        val markerOptions = MarkerOptions()        markerOptions.position(DEFAULT_LOCATION)        markerOptions.title(markerTitle)        markerOptions.snippet(markerSnippets)        markerOptions.draggable(true)        markerOptions.icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_RED))        currentMarker = mMap!!.addMarker(markerOptions)        val cameraUpdate = CameraUpdateFactory.newLatLngZoom(DEFAULT_LOCATION, 15f)        mMap!!.moveCamera(cameraUpdate)    }    private fun checkMapPermission(): Boolean {        val hasFineLocationPermission = ContextCompat.checkSelfPermission(            requireContext(),            Manifest.permission.ACCESS_FINE_LOCATION        )        return hasFineLocationPermission == PackageManager.PERMISSION_GRANTED    }    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {        super.onViewCreated(view, savedInstanceState)        val button = view.findViewById<Button>(R.id.dialogButton)        button.setOnClickListener {            showDialogStore()        }    }    override fun onDestroy() {        super.onDestroy()        mapView.onDestroy()        mainActivity.hideBottomNav(false)    }    private fun showDialogStore() {        val builder: AlertDialog.Builder = AlertDialog.Builder(requireContext())        builder.apply {            setView(com.ssafy.smartstore.R.layout.dialog_map_store)            setTitle("매장 상세")            setCancelable(true)            setPositiveButton("전화걸기") { dialog, _ ->                dialog.cancel()                val intent = Intent(Intent.ACTION_VIEW, Uri.parse("tel:010-9554-6510"))                startActivity(intent)            }            setNegativeButton("길찾기") { dialog, _ ->                dialog.cancel()                findRoutes()            }        }        builder.create().show()    }    private fun findRoutes() {        val intent = Intent(            Intent.ACTION_VIEW,            Uri.parse(                "http://www.google.com/maps?f=d" +                        "&source=s_d" +                        "&daddr=36.108536,128.413352" +                        "&hl=ko" +                        "&t=m" +                        "&dirflg=r"            )        )        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK and Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS)        intent.setClassName("com.google.android.apps.maps", "com.google.android.maps.MapsActivity")        startActivity(intent)    }}